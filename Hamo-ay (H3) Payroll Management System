using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace PayrollManagementSystem
{
    public class PayrollData
    {
        public decimal MonthlySalary { get; set; }
        public decimal OvertimePay { get; set; }
        public decimal TotalEarnings { get; set; }
        public decimal SSS { get; set; }
        public decimal GSIS { get; set; }
        public decimal PhilHealth { get; set; }
        public decimal PagIbig { get; set; }
        public decimal TrainLawTax { get; set; }
        public decimal Loan { get; set; }
        public decimal Debt { get; set; }
        public decimal TotalDeductions { get; set; }
        public decimal GrossPay { get; set; }
        public decimal NetPay { get; set; }
        public decimal BiMonthlySalary { get; set; }
        public decimal ThirteenthMonthPay { get; set; }
        public decimal ChristmasBonus { get; set; }
    }

    interface IEmployee
    {
        void DisplayDetails();
        decimal CalculateSalary();
    }

    abstract class Employee : IEmployee
    {
        public int ID { get; set; }
        public string Name { get; set; }
        public string Position { get; set; }
        public decimal SalaryPerDay { get; set; }
        public string MaritalStatus { get; set; }
        public string Address { get; set; }
        public string ContactNumber { get; set; }
        public PayrollData PayrollData { get; set; }

        public abstract decimal CalculateSalary();

        public void DisplayDetails()
        {
            Console.WriteLine($"| {ID,-5}    | {Name,-20}    | {Position,-17}     | {SalaryPerDay,-13:C}       | {MaritalStatus,-10}        | {Address,-21}| {ContactNumber,-15}  |");
        }
    }

    class FullTimeEmployee : Employee
    {
        public override decimal CalculateSalary()
        {
            return SalaryPerDay * 30; // Assume 30 working days per month
        }
    }

    class PayrollManager
    {
        private List<Employee> employees;
        private const string filePath = "employees.csv";
        private DateTime? lastCalculatedPayrollDate = null;  // To store the last calculated payroll date

        public decimal monthlySalary { get; private set; }
        public decimal grossPay { get; private set; }
        public decimal christmasBonus { get; private set; }
        public decimal thirteenthMonthPay { get; private set; }
        public decimal debt { get; private set; }
        public decimal loan { get; private set; }
        public decimal biMonthlySalary { get; private set; }
        public decimal netPay { get; private set; }

        public void CalculatePayroll(Employee emp)
        {
            // Calculate Total Earnings (Monthly Salary + Overtime Pay)
            emp.PayrollData.TotalEarnings = emp.PayrollData.MonthlySalary + emp.PayrollData.OvertimePay;

            // Calculate Gross Pay (Monthly Salary + Overtime Pay)
            emp.PayrollData.GrossPay = emp.PayrollData.MonthlySalary + emp.PayrollData.OvertimePay;

            // Calculate Total Deductions (SSS, GSIS, PhilHealth, etc.)
            emp.PayrollData.TotalDeductions = emp.PayrollData.SSS + emp.PayrollData.GSIS + emp.PayrollData.PhilHealth +
                                               emp.PayrollData.PagIbig + emp.PayrollData.TrainLawTax + emp.PayrollData.Loan +
                                               emp.PayrollData.Debt;

            // Calculate Net Pay (Gross Pay - Total Deductions)
            emp.PayrollData.NetPay = emp.PayrollData.GrossPay - emp.PayrollData.TotalDeductions;

            // Bi-monthly Salary is half of the Monthly Salary
            emp.PayrollData.BiMonthlySalary = emp.PayrollData.MonthlySalary / 2;

            // If it's December 15th, calculate the 13th month pay and Christmas Bonus
            if (DateTime.Now.Month == 12 && DateTime.Now.Day == 15)
            {
                emp.PayrollData.ChristmasBonus = emp.PayrollData.MonthlySalary * 0.10m; // Example 10% of monthly salary
                emp.PayrollData.ThirteenthMonthPay = emp.PayrollData.MonthlySalary / 12; // Example 1/12 of the monthly salary
            }
        }


        public PayrollManager()
        {
            employees = new List<Employee>();
            LoadData();
        }

        private void LoadData()
        {
            if (File.Exists(filePath))
            {
                var lines = File.ReadAllLines(filePath);
                foreach (var line in lines)
                {
                    var data = line.Split(',');
                    if (data.Length == 7)
                    {
                        Employee emp = new FullTimeEmployee
                        {
                            ID = int.Parse(data[0]),
                            Name = data[1],
                            Position = data[2],
                            SalaryPerDay = decimal.Parse(data[3]),
                            MaritalStatus = data[4],
                            Address = data[5],
                            ContactNumber = data[6]
                        };
                        employees.Add(emp);
                    }
                }
            }
        }

        private void SaveData()
        {
            var lines = employees.Select(e => $"{e.ID},{e.Name},{e.Position},{e.SalaryPerDay},{e.MaritalStatus},{e.Address},{e.ContactNumber}");
            File.WriteAllLines(filePath, lines);
        }

        public void ManageEmployee()
        {
            Console.Clear();
            Console.WriteLine("=== Manage Employee ===");
            Console.WriteLine("\n\n1. Add Employee");
            Console.WriteLine("2. Delete Employee");
            Console.WriteLine("3. Update Employee");
            Console.WriteLine("4. Return to Main Menu");
            int choice = Program.GetValidInt("\nSelect option: ");

            switch (choice)
            {
                case 1:
                    AddEmployee();
                    break;
                case 2:
                    DeleteEmployee();
                    break;
                case 3:
                    UpdateEmployee();
                    break;
                default:
                    return;
            }
        }

        public void AddEmployee()
        {
            Console.Clear();
            Console.WriteLine("=== Add New Employee ===");

            Employee emp = new FullTimeEmployee();
            emp.ID = Program.GetValidInt("\n\nEnter Employee ID: ");
            emp.Name = Program.GetValidString("\nEnter Full Name: ");

            // Display Position Choices
            Console.WriteLine("\nSelect Position:");
            Console.WriteLine("1. Software Developer");
            Console.WriteLine("2. Manager");
            Console.WriteLine("3. HR");
            Console.WriteLine("4. Other");
            int positionChoice = Program.GetValidInt("Enter Position (1-4): ");
            switch (positionChoice)
            {
                case 1:
                    emp.Position = "Software Developer";
                    break;
                case 2:
                    emp.Position = "Manager";
                    break;
                case 3:
                    emp.Position = "HR";
                    break;
                case 4:
                    emp.Position = Program.GetValidString("Enter custom position: ");
                    break;
                default:
                    Console.WriteLine("Invalid choice, setting position to default (Software Developer).");
                    emp.Position = "Software Developer";
                    break;
            }

            emp.SalaryPerDay = Program.GetValidDecimal("\nEnter Salary per Day: ");

            // Display Marital Status Choices
            Console.WriteLine("\nSelect Marital Status:");
            Console.WriteLine("1. Single");
            Console.WriteLine("2. Married");
            Console.WriteLine("3. Divorced");
            Console.WriteLine("4. Widowed");
            int maritalStatusChoice = Program.GetValidInt("Enter Marital Status (1-4): ");
            switch (maritalStatusChoice)
            {
                case 1:
                    emp.MaritalStatus = "Single";
                    break;
                case 2:
                    emp.MaritalStatus = "Married";
                    break;
                case 3:
                    emp.MaritalStatus = "Divorced";
                    break;
                case 4:
                    emp.MaritalStatus = "Widowed";
                    break;
                default:
                    Console.WriteLine("Invalid choice, setting marital status to default (Single).");
                    emp.MaritalStatus = "Single";
                    break;
            }

            emp.Address = Program.GetValidString("\nEnter Address: ");
            emp.ContactNumber = Program.GetValidString("\nEnter Contact Number: ");

            employees.Add(emp);
            SaveData();

            Console.WriteLine("\n\nEmployee added successfully. Press any key to return to the main menu.");
            Console.ReadKey();
        }


        public void DeleteEmployee()
        {
            Console.Clear();
            Console.WriteLine("=== Delete Employee ===");

            int id = Program.GetValidInt("\n\nEnter Employee ID to delete: ");
            var emp = employees.FirstOrDefault(e => e.ID == id);

            if (emp != null)
            {
                employees.Remove(emp);
                SaveData();
                Console.WriteLine("\nEmployee deleted successfully.");
            }
            else
            {
                Console.WriteLine("\nEmployee not found.");
            }
            Console.WriteLine("\n\nPress any key to return to the main menu.");
            Console.ReadKey();
        }

        public void UpdateEmployee()
        {
            Console.Clear();
            Console.WriteLine("=== Update Employee ===");

            int id = Program.GetValidInt("\n\nEnter Employee ID to update: ");
            var emp = employees.FirstOrDefault(e => e.ID == id);

            if (emp != null)
            {
                emp.Name = Program.GetValidString($"\nEnter new Name (Current: {emp.Name}): ");
                emp.Position = Program.GetValidString($"\nEnter new Position (Current: {emp.Position}): ");
                emp.SalaryPerDay = Program.GetValidDecimal($"\nEnter new Salary per Day (Current: {emp.SalaryPerDay}): ");
                emp.MaritalStatus = Program.GetValidString($"\nEnter new Marital Status (Current: {emp.MaritalStatus}): ");
                emp.Address = Program.GetValidString($"\nEnter new Address (Current: {emp.Address}): ");
                emp.ContactNumber = Program.GetValidString($"\nEnter new Contact Number (Current: {emp.ContactNumber}): ");
                SaveData();
                Console.WriteLine("\nEmployee updated successfully.");
            }
            else
            {
                Console.WriteLine("\nEmployee not found.");
            }
            Console.WriteLine("\n\nPress any key to return to the main menu.");
            Console.ReadKey();
        }

        public void ViewEmployee()
        {
            Console.Clear();
            Console.WriteLine("=== View Employee ===");

            int id = Program.GetValidInt("\nEnter Employee ID to view: ");
            var emp = employees.FirstOrDefault(e => e.ID == id);

            if (emp != null)
            {
                Console.WriteLine("\n\n==================================================================================================================================================");
                Console.WriteLine("| ID       | Name                    | Position              |  Salary per Day     |  Marital Status   |   Address            | Contact Number   |");
                Console.WriteLine("--------------------------------------------------------------------------------------------------------------------------------------------------");
                emp.DisplayDetails();
                Console.WriteLine("==================================================================================================================================================");
            }
            else
            {
                Console.WriteLine("Employee not found.");
            }
            Console.WriteLine("\nPress any key to return to the main menu.");
            Console.ReadKey();
        }

        public void SearchEmployee()
        {
            Console.Clear();
            Console.WriteLine("=== Search Employee ===");

            int id = Program.GetValidInt("\n\nEnter Employee ID to search: ");
            var emp = employees.FirstOrDefault(e => e.ID == id);

            if (emp != null)
            {
                Console.WriteLine("\nEmployee Found!");
                Console.WriteLine("\n==================================================");
                Console.WriteLine("| ID    | Name                 | Position        |");
                Console.WriteLine("--------------------------------------------------");
                Console.WriteLine($"| {emp.ID,-5} | {emp.Name,-20} | {emp.Position,-15} |");
                Console.WriteLine("==================================================");
            }
            else
            {
                Console.WriteLine("\nEmployee not found.");
            }
            Console.WriteLine("\n\nPress any key to return to the main menu.");
            Console.ReadKey();
        }

        public void CalculatePayroll()
        {
            Console.Clear();
            Console.WriteLine("=== Calculate Payroll ===\n");

            int id = Program.GetValidInt("\nEnter Employee ID to calculate payroll: ");
            var emp = employees.FirstOrDefault(e => e.ID == id);

            if (emp != null)
            {
                Console.WriteLine($"\nEmployee: {emp.Name}");
                Console.WriteLine($"Position: {emp.Position}");
                Console.WriteLine($"Salary per Day: {emp.SalaryPerDay:C}\n");

                // Validate payroll date
                DateTime payrollDate;
                while (true)
                {
                    Console.Write("Enter Payroll Date (MM/DD/YYYY): ");
                    string input = Console.ReadLine()?.Trim();
                    if (DateTime.TryParse(input, out payrollDate) && (payrollDate.Day == 15 || payrollDate.Day == 30))
                        break;
                    else
                        Console.WriteLine("Invalid date. The date must be in MM/DD/YYYY format.");
                }

                // Validate number of days worked
                decimal daysWorked;
                while (true)
                {
                    daysWorked = Program.GetValidDecimal("Enter the number of days worked in this period: ");
                    if ((payrollDate.Day == 15 && daysWorked <= 15) || (payrollDate.Day == 30 && daysWorked <= 30))
                        break;
                    else
                        Console.WriteLine($"Invalid input. For the {payrollDate.Day}th payroll, days worked cannot exceed {payrollDate.Day}.");
                }

                // Calculate salary for the period
                decimal calculatedSalary = emp.SalaryPerDay * daysWorked;
                Console.WriteLine($"\nMonthly salary: {calculatedSalary:C}\n");

                // Deductions
                Console.WriteLine("Deductions:");
                decimal sss = Program.GetValidDecimal("    SSS Deduction: ");
                decimal gsis = Program.GetValidDecimal("    GSIS Deduction: ");
                decimal philhealth = Program.GetValidDecimal("    PhilHealth Deduction: ");
                decimal pagIbig = Program.GetValidDecimal("    Pag-Ibig Deduction: ");

                // Train Law Tax - Deducted Monthly
                decimal annualSalary = calculatedSalary * 12; // Projected annual salary
                decimal trainLawTaxAnnual = CalculateTrainLawTax(annualSalary); // Annual tax
                decimal trainLawTaxMonthly = trainLawTaxAnnual / 12; // Monthly tax deduction
                Console.WriteLine($"    Train Law Tax (Monthly): {trainLawTaxMonthly:C}");

                Console.WriteLine("Other Deductions:");
                decimal loans = Program.GetValidDecimal("    Loans Deduction: ");
                decimal debts = Program.GetValidDecimal("    Debts Deduction: ");

                decimal totalDeductions = sss + gsis + philhealth + pagIbig + trainLawTaxMonthly + loans + debts;

                // Overtime calculation
                decimal overtimeHours = Program.GetValidDecimal("\nOvertime Hours: ");
                decimal overtimePay = overtimeHours * (emp.SalaryPerDay / 8); // Assuming 8 work hours per day
                Console.WriteLine($"    Overtime Pay: {overtimePay:C}\n");

                // Final net salary for the period
                decimal finalSalary = calculatedSalary - totalDeductions + overtimePay;
                Console.WriteLine($"\nTotal monthly salary: {finalSalary:C}\n");
                lastCalculatedPayrollDate = payrollDate;

                // Save payroll data for the employee
                emp.PayrollData = new PayrollData
                {
                    MonthlySalary = calculatedSalary,
                    OvertimePay = overtimePay,
                    TotalDeductions = totalDeductions,
                    GrossPay = calculatedSalary + overtimePay,
                    NetPay = finalSalary,
                    BiMonthlySalary = calculatedSalary / 2,
                    SSS = sss,
                    GSIS = gsis,
                    PhilHealth = philhealth,
                    PagIbig = pagIbig,
                    TrainLawTax = trainLawTaxMonthly,
                    Loan = loans,
                    Debt = debts,
                };

                Console.WriteLine("\nPayroll calculation completed successfully.");
                Console.WriteLine("\nPress any key to continue...");
                Console.ReadKey();
            }
            else
            {
                Console.WriteLine("\nEmployee not found.");
            }

            Console.WriteLine("\nPress any key to return to the main menu.");
            Console.ReadKey();
        }
         public void GeneratePaySlip()
        {
            Console.Clear();
            Console.WriteLine("=== Generate Pay Slip ===");

            int id = Program.GetValidInt("\n\nEnter Employee ID for Pay Slip: ");
            var emp = employees.FirstOrDefault(e => e.ID == id);

            if (emp != null && emp.PayrollData != null)
            {
                // Ask for payroll month and year input
                DateTime payrollDate;
                while (true)
                {
                    Console.Write("\nEnter Payroll Year (YYYY): ");
                    int year = Program.GetValidInt("");

                    Console.Write("Enter Payroll Month (MM): ");
                    int month = Program.GetValidInt("");

                    // Ensure month is valid
                    if (month < 1 || month > 12)
                    {
                        Console.WriteLine("\nInvalid month. Please enter a month between 1 and 12.");
                        continue;
                    }

                    // Ask for a valid day (15th or 30th)
                    Console.Write("Enter Payroll Day (15 or 30): ");
                    int day = Program.GetValidInt("");

                    if ((day == 15 || day == 30) && (month >= 1 && month <= 12))
                    {
                        try
                        {
                            payrollDate = new DateTime(year, month, day);

                            // Check if the payroll has been calculated for the given date
                            if (lastCalculatedPayrollDate == null || lastCalculatedPayrollDate.Value != payrollDate)
                            {
                                Console.WriteLine("\nPayroll has not been calculated for this date. Please calculate payroll first.");
                                Console.WriteLine("\nPress any key to continue...");
                                Console.ReadKey();
                                return;  // Exit if payroll is not calculated
                            }

                            break;
                        }
                        catch (ArgumentOutOfRangeException)
                        {
                            Console.WriteLine("\nInvalid date. Please try again.");
                        }
                    }
                    else
                    {
                        Console.WriteLine("\nInvalid day. The day must be either 15 or 30.");
                    }
                }

                // Prepare the pay slip content
                string paySlipContent = $"\n\n=== Pay Slip ===\n";
                paySlipContent += $"\nEmployee Name: {emp.Name}\n";
                paySlipContent += $"Employee ID: {emp.ID}\n";
                paySlipContent += $"Position: {emp.Position}\n\n";
                paySlipContent += $"Payroll Date: {payrollDate.ToString("MMMM dd yyyy")}\n\n";

                // Earnings Table
                paySlipContent += "========================================\n";
                paySlipContent += "|      Earnings      |      Amount     |\n";
                paySlipContent += "----------------------------------------\n";
                paySlipContent += $"| Monthly Salary     |   {emp.PayrollData.MonthlySalary,13:C} |\n";
                paySlipContent += $"| Overtime Pay       |   {emp.PayrollData.OvertimePay,13:C} |\n";
                paySlipContent += "========================================\n";
                paySlipContent += $"| Total Earnings     |   {emp.PayrollData.GrossPay,13:C} |\n";
                paySlipContent += "========================================\n\n";

                // Deductions Table
                paySlipContent += "========================================\n";
                paySlipContent += "|    Deductions      |      Amount     |\n";
                paySlipContent += "----------------------------------------\n";
                paySlipContent += $"| SSS                |   {emp.PayrollData.SSS,13:C} |\n";
                paySlipContent += $"| GSIS               |   {emp.PayrollData.GSIS,13:C} |\n";
                paySlipContent += $"| PhilHealth         |   {emp.PayrollData.PhilHealth,13:C} |\n";
                paySlipContent += $"| Pag-Ibig           |   {emp.PayrollData.PagIbig,13:C} |\n";
                paySlipContent += $"| Train Law Tax      |   {emp.PayrollData.TrainLawTax,13:C} |\n";
                paySlipContent += $"| Loan Deduction     |   {emp.PayrollData.Loan,13:C} |\n";
                paySlipContent += $"| Debt Deduction     |   {emp.PayrollData.Debt,13:C} |\n";
                paySlipContent += "========================================\n";
                paySlipContent += $"| Total Deductions   |   {emp.PayrollData.TotalDeductions,13:C} |\n";
                paySlipContent += "========================================\n\n";

                // Calculate Bi-Monthly Salary (Net Pay / 2)
                decimal biMonthlySalary = emp.PayrollData.NetPay / 2;

                // Add the Summary Table
                paySlipContent += "========================================\n";
                paySlipContent += "|      Summary       |      Amount     |\n";
                paySlipContent += "----------------------------------------\n";
                paySlipContent += $"| Monthly Salary     |   {emp.PayrollData.MonthlySalary,13:C} |\n";
                paySlipContent += $"| Total Deductions   |   {emp.PayrollData.TotalDeductions,13:C} |\n";
                paySlipContent += $"| Net Pay            |   {emp.PayrollData.NetPay,13:C} |\n";
                paySlipContent += $"| Bi-Monthly Pay     |   {biMonthlySalary,13:C} |\n";
                paySlipContent += "========================================\n\n";

                // Check if the date is December 30 and display Christmas Bonus and 13th Month Pay
                if (payrollDate.Month == 12 && payrollDate.Day == 30)
                {
                    decimal christmasBonus = emp.PayrollData.MonthlySalary * 0.10m;  // Assuming 10% of Monthly Salary as Christmas Bonus
                    decimal thirteenthMonthPay = emp.PayrollData.MonthlySalary;  // Assuming 13th Month Pay is equal to Monthly Salary

                    // Add Christmas Bonus and 13th Month Pay Table
                    paySlipContent += "=========================================\n";
                    paySlipContent += "|      Bonus Type     |      Amount     |\n";
                    paySlipContent += "------------------------------------------\n";
                    paySlipContent += $"| Christmas Bonus     |   {christmasBonus,13:C} |\n";
                    paySlipContent += $"| 13th Month Pay      |   {thirteenthMonthPay,13:C} |\n";
                    paySlipContent += "=========================================\n";

                    // Add to Net Pay
                    emp.PayrollData.NetPay += christmasBonus + thirteenthMonthPay;
                }

                // Output the pay slip
                Console.WriteLine(paySlipContent);
                Console.WriteLine("\nPay slip generated successfully.");

                string folderPath = "PaySlips";
                string fileName = $"PaySlip_{emp.Name.Replace(" ", "_")}_{payrollDate.ToString("yyyy_MM_dd")}.txt";

                if (!System.IO.Directory.Exists(folderPath))
                {
                    System.IO.Directory.CreateDirectory(folderPath);
                }

                string filePath = System.IO.Path.Combine(folderPath, fileName);
                System.IO.File.WriteAllText(filePath, paySlipContent);

                Console.WriteLine($"\nPay slip saved to: {System.IO.Path.GetFullPath(filePath)}");
            }
            else
            {
                Console.WriteLine("\nEmployee not found or payroll data not available.");
            }

            Console.WriteLine("\nPress any key to return to the main menu.");
            Console.ReadKey();
        }

        public decimal CalculateTrainLawTax(decimal annualSalary)
        {
            decimal tax = 0;

            if (annualSalary <= 250000)
            {
                tax = 0; // No tax for salaries ≤ P250,000
            }
            else if (annualSalary <= 400000)
            {
                tax = (annualSalary - 250000) * 0.15m; // 15% on excess over P250,000
            }
            else if (annualSalary <= 800000)
            {
                tax = 22500 + (annualSalary - 400000) * 0.20m; // P22,500 + 20% on excess over P400,000
            }
            else if (annualSalary <= 2000000)
            {
                tax = 102500 + (annualSalary - 800000) * 0.25m; // P102,500 + 25% on excess over P800,000
            }
            else if (annualSalary <= 8000000)
            {
                tax = 402500 + (annualSalary - 2000000) * 0.30m; // P402,500 + 30% on excess over P2,000,000
            }
            else
            {
                tax = 2202500 + (annualSalary - 8000000) * 0.35m; // P2,202,500 + 35% on excess over P8,000,000
            }

            return tax;
        }

    }

    class Program
    {
        static void Main()
        {
            PayrollManager payrollManager = new PayrollManager();

            while (true)
            {
                Console.Clear();
                Console.WriteLine("=== Payroll Management System ===\n\n");
                Console.WriteLine("1. Manage Employee");
                Console.WriteLine("2. View Employee");
                Console.WriteLine("3. Search Employee");
                Console.WriteLine("4. Calculate Payroll");
                Console.WriteLine("5. Generate Pay Slip");
                Console.WriteLine("6. Exit");

                int choice = GetValidInt("\nSelect an option: ");
                switch (choice)
                {
                    case 1:
                        payrollManager.ManageEmployee();
                        break;
                    case 2:
                        payrollManager.ViewEmployee();
                        break;
                    case 3:
                        payrollManager.SearchEmployee();
                        break;
                    case 4:
                        payrollManager.CalculatePayroll();
                        break;
                    case 5:
                        payrollManager.GeneratePaySlip();
                        break;
                    case 6:
                        return;
                }
            }
        }

        public static int GetValidInt(string prompt)
        {
            int value;
            while (true)
            {
                Console.Write(prompt);
                if (int.TryParse(Console.ReadLine(), out value))
                    return value;
                else
                    Console.WriteLine("Invalid input. Please enter a valid number.");
            }
        }

        public static decimal GetValidDecimal(string prompt)
        {
            decimal value;
            while (true)
            {
                Console.Write(prompt);
                if (decimal.TryParse(Console.ReadLine(), out value))
                    return value;
                else
                    Console.WriteLine("Invalid input. Please enter a valid decimal value.");
            }
        }

        public static string GetValidString(string prompt)
        {
            Console.Write(prompt);
            return Console.ReadLine().Trim();
        }
    }
}
